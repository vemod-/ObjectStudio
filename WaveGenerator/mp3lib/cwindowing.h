#ifndef CWINDOWING_H
#define CWINDOWING_H

#include "bstream.h"
#include <climits>

class CWindowing
{
public:
    CWindowing(const int bits, const int bytes, const int channels, const int bitmask)
    {
        m_bits=bits;
        m_bytes=bytes;
        m_channels=channels;
        m_bitmask=bitmask;
    }
    void doWin(const double *vbuf, const int vb_ptr, void *pcm) const
    {
        int si = vb_ptr + (m_bits/2);
        int bx = (si + m_bits) & m_bitmask;
        double* coef = getWinCoef();
        /*-- first half --*/
        for (int i = 0; i < m_bits/2; i++) addToPCM(winFirst(vbuf,coef,si,bx),pcm);
        /*--  special case --*/
        addToPCM(winSpecial(vbuf,coef,bx),pcm);
        /*-- last half --*/
        coef = getWinCoef() + 255; /* back pass through coefs */
        for (int i = 0; i < (m_bits/2)-1; i++) addToPCM(winLast(vbuf,coef,si,bx),pcm);
    }
private:
    int m_channels;
    int m_bits;
    int m_bytes;
    int m_bitmask;
    static double* getWinCoef()
    {
        static const double wincoef[264] =
        {    // window coefs
                        0.000000000, 0.000442505, -0.003250122, 0.007003784,
                        -0.031082151, 0.078628540, -0.100311279, 0.572036743,
                        -1.144989014, -0.572036743, -0.100311279, -0.078628540,
                        -0.031082151, -0.007003784, -0.003250122, -0.000442505,
                        0.000015259, 0.000473022, -0.003326416, 0.007919312,
                        -0.030517576, 0.084182739, -0.090927124, 0.600219727,
                        -1.144287109, -0.543823242, -0.108856201, -0.073059082,
                        -0.031478882, -0.006118774, -0.003173828, -0.000396729,
                        0.000015259, 0.000534058, -0.003387451, 0.008865356,
                        -0.029785154, 0.089706421, -0.080688477, 0.628295898,
                        -1.142211914, -0.515609741, -0.116577141, -0.067520142,
                        -0.031738281, -0.005294800, -0.003082275, -0.000366211,
                        0.000015259, 0.000579834, -0.003433228, 0.009841919,
                        -0.028884888, 0.095169067, -0.069595337, 0.656219482,
                        -1.138763428, -0.487472534, -0.123474121, -0.061996460,
                        -0.031845093, -0.004486084, -0.002990723, -0.000320435,
                        0.000015259, 0.000625610, -0.003463745, 0.010848999,
                        -0.027801514, 0.100540161, -0.057617184, 0.683914185,
                        -1.133926392, -0.459472656, -0.129577637, -0.056533810,
                        -0.031814575, -0.003723145, -0.002899170, -0.000289917,
                        0.000015259, 0.000686646, -0.003479004, 0.011886597,
                        -0.026535034, 0.105819702, -0.044784546, 0.711318970,
                        -1.127746582, -0.431655884, -0.134887695, -0.051132202,
                        -0.031661987, -0.003005981, -0.002792358, -0.000259399,
                        0.000015259, 0.000747681, -0.003479004, 0.012939452,
                        -0.025085449, 0.110946655, -0.031082151, 0.738372803,
                        -1.120223999, -0.404083252, -0.139450073, -0.045837402,
                        -0.031387329, -0.002334595, -0.002685547, -0.000244141,
                        0.000030518, 0.000808716, -0.003463745, 0.014022826,
                        -0.023422241, 0.115921021, -0.016510010, 0.765029907,
                        -1.111373901, -0.376800537, -0.143264771, -0.040634155,
                        -0.031005858, -0.001693726, -0.002578735, -0.000213623,
                        0.000030518, 0.000885010, -0.003417969, 0.015121460,
                        -0.021575928, 0.120697014, -0.001068115, 0.791213989,
                        -1.101211548, -0.349868774, -0.146362305, -0.035552979,
                        -0.030532837, -0.001098633, -0.002456665, -0.000198364,
                        0.000030518, 0.000961304, -0.003372192, 0.016235352,
                        -0.019531250, 0.125259399, 0.015228271, 0.816864014,
                        -1.089782715, -0.323318481, -0.148773193, -0.030609131,
                        -0.029937742, -0.000549316, -0.002349854, -0.000167847,
                        0.000030518, 0.001037598, -0.003280640, 0.017349243,
                        -0.017257690, 0.129562378, 0.032379150, 0.841949463,
                        -1.077117920, -0.297210693, -0.150497437, -0.025817871,
                        -0.029281614, -0.000030518, -0.002243042, -0.000152588,
                        0.000045776, 0.001113892, -0.003173828, 0.018463135,
                        -0.014801024, 0.133590698, 0.050354004, 0.866363525,
                        -1.063217163, -0.271591187, -0.151596069, -0.021179199,
                        -0.028533936, 0.000442505, -0.002120972, -0.000137329,
                        0.000045776, 0.001205444, -0.003051758, 0.019577026,
                        -0.012115479, 0.137298584, 0.069168091, 0.890090942,
                        -1.048156738, -0.246505737, -0.152069092, -0.016708374,
                        -0.027725220, 0.000869751, -0.002014160, -0.000122070,
                        0.000061035, 0.001296997, -0.002883911, 0.020690918,
                        -0.009231566, 0.140670776, 0.088775635, 0.913055420,
                        -1.031936646, -0.221984863, -0.151962280, -0.012420653,
                        -0.026840210, 0.001266479, -0.001907349, -0.000106812,
                        0.000061035, 0.001388550, -0.002700806, 0.021789551,
                        -0.006134033, 0.143676758, 0.109161377, 0.935195923,
                        -1.014617920, -0.198059082, -0.151306152, -0.008316040,
                        -0.025909424, 0.001617432, -0.001785278, -0.000106812,
                        0.000076294, 0.001480103, -0.002487183, 0.022857666,
                        -0.002822876, 0.146255493, 0.130310059, 0.956481934,
                        -0.996246338, -0.174789429, -0.150115967, -0.004394531,
                        -0.024932859, 0.001937866, -0.001693726, -0.000091553,
                        -0.001586914, -0.023910521, -0.148422241, -0.976852417,
                        0.152206421, 0.000686646, -0.002227783, 0.000076294,
        };
        return const_cast<double*>(wincoef);
    }
    inline double fw(int& i, double*& coef, const double* vbuf) const
    {
        const double f = (*coef++) * vbuf[i];
        i = (i + (m_bits*2)) & m_bitmask;
        return f;
    }
    inline double bw(int& i, double*& coef, const double* vbuf) const
    {
        const double f = (*coef--) * vbuf[i];
        i = (i + (m_bits*2)) & m_bitmask;
        return f;
    }
    inline void addToPCM(double n, void*& pcm) const
    {
        if (n > SHRT_MAX) n = SHRT_MAX;
        else if (n < SHRT_MIN) n = SHRT_MIN;
        if (m_bytes == 1)
        {
            *static_cast<byte*>(pcm) = (static_cast<byte>(short(n) >> 8)) ^ 0x80;
            pcm = static_cast<byte*>(pcm) + m_channels;
        }
        else
        {
            *static_cast<short*>(pcm) = short(n);
            pcm = static_cast<short*>(pcm) + m_channels;
        }
    }
    inline double winFirst(const double* vbuf, double*& coef, int& si, int& bx) const
    {
        double sum = 0.0;
        for (int j = 0; j < 8; j++)
        {
            sum += fw(si,coef,vbuf);
            sum -= fw(bx,coef,vbuf);
        }
        si++;
        bx--;
        return sum;
    }
    inline double winSpecial(const double* vbuf, double*& coef, int& bx) const
    {
        double sum = 0.0;
        for (int j = 0; j < 8; j++) sum += fw(bx,coef,vbuf);
        return sum;
    }
    inline double winLast(const double* vbuf, double*& coef, int& si, int& bx) const
    {
        si--;
        bx++;
        double sum = 0.0;
        for (int j = 0; j < 8; j++)
        {
            sum += bw(si,coef,vbuf);
            sum += bw(bx,coef,vbuf);
        }
        return sum;
    }
};

#endif // CWINDOWING_H
